buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.11'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'

	// QueryDSL
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"

	// avro
	id "com.github.davidmc24.gradle.plugin.avro" version "1.7.1"

}

group = 'com.avocado'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// QueryDSL
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}" // QueryDSL 라이브러리
	annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}" //  QueryDSL 관련 코드 생성 기능 제공

	// kafka
	implementation 'org.springframework.kafka:spring-kafka' // 버전을 명시하지 않아 Boot가 compatible version을 찾게 하는 것이 좋음
	testImplementation 'org.springframework.kafka:spring-kafka-test'

	// avro
	implementation "org.apache.avro:avro:1.11.1"
}

tasks.named('test') {
	useJUnitPlatform()
}

//QueryDSL 추가
def querydslDir = "$buildDir/generated/querydsl"
querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}

sourceSets { // IDE 소스 폴더에 자동으로 넣어준다.
	main.java.srcDir querydslDir
}

configurations {
	querydsl.extendsFrom compileClasspath // 컴파일이 될때 같이 수행
}

compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl // Q 파일을 생성해준다.
}
